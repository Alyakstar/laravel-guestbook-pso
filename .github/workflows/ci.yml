# .github/workflows/ci.yml
name: Laravel CI Pipeline

# Memicu workflow pada setiap push ke branch 'master' dan pada setiap pull request
on:
  push:
    branches:
      - master # Pastikan ini sesuai dengan nama branch utama Anda (misal: 'main' atau 'master')
  pull_request:
    branches:
      - master # Pastikan ini sesuai dengan nama branch utama Anda

jobs:
  # 1. Job: Build dan Test Aplikasi Laravel
  build-and-test:
    runs-on: ubuntu-latest # Menjalankan job di mesin virtual Ubuntu terbaru yang disediakan GitHub Actions

    steps:
      - name: Checkout kode repository
        uses: actions/checkout@v4 # Action untuk mengambil kode repository Anda

      - name: Set up PHP lingkungan
        uses: shivammathur/setup-php@v2 # Action untuk menginstal PHP dan ekstensi umum
        with:
          php-version: '8.2' # Pastikan versi PHP ini sesuai dengan yang digunakan aplikasi Laravel Anda
          extensions: pdo_mysql, mbstring, dom, gd, bcmath, exif, zip # Ekstensi esensial untuk Laravel, ditambahkan bcmath, exif, dan zip
          coverage: none # Tidak mengumpulkan code coverage untuk setup ini

      - name: Cache Composer dependencies
        # Menggunakan cache Composer untuk mempercepat instalasi dependensi pada eksekusi selanjutnya
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Instal Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Create .env file for testing
        # Membuat file .env secara langsung dengan variabel yang diperlukan untuk lingkungan pengujian CI.
        # Ini penting agar Laravel dapat berjalan di lingkungan CI.
        run: |
          echo "APP_NAME=Laravel" > .env
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=true" >> .env
          echo "APP_URL=http://localhost" >> .env
          echo "LOG_CHANNEL=stack" >> .env
          echo "APP_KEY=" >> .env # APP_KEY akan digenerate di langkah selanjutnya
          echo "DB_CONNECTION=sqlite" >> .env # Menggunakan SQLite untuk pengujian CI yang lebih cepat dan efisien
          echo "DB_DATABASE=database/database.sqlite" >> .env

      - name: Generate application key (for testing environment)
        # Menghasilkan APP_KEY baru yang akan disimpan di file .env yang baru dibuat
        run: php artisan key:generate

      - name: Create database (for SQLite in CI)
        # Memastikan direktori 'database' ada dan membuat file database.sqlite kosong yang akan digunakan oleh SQLite
        run: mkdir -p database && touch database/database.sqlite

      - name: Run database migrations
        # Menjalankan semua migrasi database yang ada untuk menyiapkan skema database pengujian.
        # --force diperlukan di lingkungan non-interaktif seperti CI.
        run: php artisan migrate --force

      # - name: Jalankan seed database (opsional)
      #   # Hapus komentar baris ini jika Anda memiliki seeder yang perlu dijalankan untuk mengisi data dummy untuk pengujian.
      #   # run: php artisan db:seed

      - name: Periksa Kualitas Kode dengan Laravel Pint
        # Menjalankan Laravel Pint untuk memeriksa dan memastikan standar gaya kode.
        # Gunakan 'php vendor/bin/pint --test' untuk hanya memeriksa (gagal jika ada perbedaan)
        # Gunakan 'php vendor/bin/pint' untuk otomatis memperbaiki (dan kemudian commit perbaikan)
        run: php vendor/bin/pint --test # Memeriksa gaya kode, gagal jika ada masalah

      - name: Run PHPUnit tests
        # Mengeksekusi semua tes PHPUnit Laravel Anda. Jika ada tes yang gagal, job ini akan gagal,
        # yang menandakan adanya regresi atau bug.
        run: php artisan test

  # 2. Job: Build Docker Image
  build-docker-image:
    needs: build-and-test # Job ini hanya akan berjalan jika job 'build-and-test' berhasil diselesaikan tanpa kesalahan
    runs-on: ubuntu-latest # Menjalankan job di mesin virtual Ubuntu terbaru

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Diperlukan untuk build Docker modern dan caching

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Melakukan autentikasi dengan akun Docker Hub Anda
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Menggunakan GitHub Secret untuk username Docker Hub Anda
          password: ${{ secrets.DOCKER_TOKEN }}    # Menggunakan GitHub Secret untuk Personal Access Token (PAT) Docker Hub Anda

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # Membangun image menggunakan Dockerfile Anda dan mendorongnya ke Docker Hub
        with:
          context: . # Konteks build adalah root repository Anda (tempat Dockerfile berada)
          push: true # Menginstruksikan action untuk mendorong image yang dibangun ke Docker Hub
          # Tags yang akan diterapkan pada Docker image. Ini sudah benar dan disesuaikan dengan akun Anda.
          tags: |
            alyakstar/laravel-guestbook-pso:latest
            alyakstar/laravel-guestbook-pso:${{ github.sha }} # Tag image dengan commit SHA (identifikasi unik per build)
          cache-from: type=gha,scope=build-image # Memanfaatkan cache GitHub Actions untuk build yang lebih cepat
          cache-to: type=gha,scope=build-image,mode=max # Menyimpan cache build untuk jalankan di masa mendatang
